# migrations/versions/c52634705dbb_add_is_admin_to_user.py
"""Add is_admin to User and handle password hash migration""" 

# Revision ID: c52634705dbb
# Revises: 4dead0543945 # ID de la révision précédente
# Create Date: ...

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'c52634705dbb'
down_revision = '4dead0543945' # ID de la révision précédente
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - Ajusté ###
    with op.batch_alter_table('user', schema=None) as batch_op:
        # 1. Ajouter/Modifier password_hash (doit être NOT NULL maintenant)
        #    (Assurez-vous que cette opération est correcte selon votre état précédent)
        try:
             # Si la colonne existe déjà (suite à une tentative précédente), on la modifie
             batch_op.alter_column('password_hash',
                                   existing_type=sa.VARCHAR(length=256),
                                   nullable=False)
             print("INFO: Altered existing 'password_hash' column to NOT NULL.")
        except Exception:
             # Sinon, on l'ajoute
             batch_op.add_column(sa.Column('password_hash', sa.String(length=256), nullable=False))
             print("INFO: Added new 'password_hash' column as NOT NULL.")


        # 2. Ajouter is_admin avec server_default pour les lignes existantes.
        try:
            # Si la colonne existe déjà, on s'assure qu'elle est correcte
            batch_op.alter_column('is_admin',
                                  existing_type=sa.Boolean(),
                                  nullable=False,
                                  server_default=sa.text('false'))
            print("INFO: Altered existing 'is_admin' column.")
        except Exception:
            # Sinon, on l'ajoute
            batch_op.add_column(sa.Column('is_admin', sa.Boolean(), server_default=sa.text('false'), nullable=False))
            print("INFO: Added new 'is_admin' column.")

        # 3. (Commenté car copie faite manuellement)
        # # print("INFO: Copying data from 'password' to 'password_hash'...")
        # # batch_op.execute('UPDATE "user" SET password_hash = password WHERE password_hash IS NULL')
        # # print("INFO: Data copy finished.")

        # --- AJOUT/VÉRIFICATION CRUCIALE ---
        # 4. Supprimer l'ancienne colonne 'password'
        try:
            print("INFO: Attempting to drop old 'password' column...")
            batch_op.drop_column('password')
            print("INFO: Old 'password' column dropped.")
        except Exception as e:
            # Peut échouer si elle a déjà été supprimée, ce n'est pas grave
            print(f"INFO: Could not drop 'password' column (maybe already dropped or renamed): {e}")
        # --- FIN AJOUT/VÉRIFICATION ---

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - Ajusté ###
    with op.batch_alter_table('user', schema=None) as batch_op:
        # --- AJOUT/VÉRIFICATION CRUCIALE pour Downgrade ---
        # 1. Rajouter l'ancienne colonne 'password' (la rendre nullable pour éviter les erreurs)
        try:
            print("INFO: Attempting to add back old 'password' column...")
            batch_op.add_column(sa.Column('password', sa.VARCHAR(length=200), nullable=True)) # Ajuster le type si besoin
            print("INFO: Old 'password' column added back.")
            # Idéalement, copier les données de password_hash vers password ici si possible/nécessaire
            # print("INFO: Attempting to copy data from 'password_hash' back to 'password'...")
            # batch_op.execute('UPDATE "user" SET password = password_hash')
            # print("INFO: Data copy back finished.")
        except Exception as e:
             print(f"INFO: Could not add back 'password' column (maybe it exists?): {e}")
        # --- FIN AJOUT/VÉRIFICATION ---

        # 2. Supprimer les nouvelles colonnes
        try:
            print("INFO: Attempting to drop 'is_admin' column...")
            batch_op.drop_column('is_admin')
            print("INFO: Dropped 'is_admin' column.")
        except Exception as e:
            print(f"INFO: Could not drop 'is_admin' column: {e}")

        try:
            print("INFO: Attempting to drop 'password_hash' column...")
            batch_op.drop_column('password_hash')
            print("INFO: Dropped 'password_hash' column.")
        except Exception as e:
            print(f"INFO: Could not drop 'password_hash' column: {e}")


    # ### end Alembic commands ###
